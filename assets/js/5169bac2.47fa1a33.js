"use strict";(self.webpackChunklearn_cpp_and_dev_practices=self.webpackChunklearn_cpp_and_dev_practices||[]).push([[1881],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),m=o,d=f["".concat(c,".").concat(m)]||f[m]||p[m]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4021:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return f}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],s={title:"Use a formatting tool",benefit:4,easiness:5,order:1,tags:["Dev Practices"]},c=void 0,l={unversionedId:"lessons/use-a-formatting-tool",id:"lessons/use-a-formatting-tool",isDocsHomePage:!1,title:"Use a formatting tool",description:"Brief",source:"@site/docs/lessons/use-a-formatting-tool.md",sourceDirName:"lessons",slug:"/lessons/use-a-formatting-tool",permalink:"/Learn--Cpp-And-Dev-Practices/docs/lessons/use-a-formatting-tool",tags:[{label:"Dev Practices",permalink:"/Learn--Cpp-And-Dev-Practices/docs/tags/dev-practices"}],version:"current",frontMatter:{title:"Use a formatting tool",benefit:4,easiness:5,order:1,tags:["Dev Practices"]},sidebar:"lessons",previous:{title:"Use Git",permalink:"/Learn--Cpp-And-Dev-Practices/docs/lessons/use-git"},next:{title:"Naming",permalink:"/Learn--Cpp-And-Dev-Practices/docs/lessons/naming"}},u=[{value:"Brief",id:"brief",children:[]},{value:"Details",id:"details",children:[]}],p={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"brief"},"Brief"),(0,a.kt)("p",null,"Tools can format your code automatically: fix indentation, add spaces consistently, put curly braces where you want them, ",(0,a.kt)("em",{parentName:"p"},"etc."),"\nIt saves a lot of time because it means you don't have to worry about it and do it manually!\nAlso, it ensures a consistency in style across the whole codebase and all the developpers."),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("p",null,"For C++, ",(0,a.kt)("em",{parentName:"p"},"Clang format")," is the most used one and I would recommend it. You can use it inside VSCode through this extension: ",(0,a.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=xaver.clang-format"},"xaver.clang-format"),"."),(0,a.kt)("p",null,"You will need to put a configuration file at the root of your project to specify how the formatting should be done. You can use ",(0,a.kt)("a",{parentName:"p",href:"https://zed0.co.uk/clang-format-configurator/"},"this great website")," to configure it. If you don't want to spend too many time tweaking it yourself, you can use mine: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoolLibs/Cool/blob/main/.clang-format"},"https://github.com/CoolLibs/Cool/blob/main/.clang-format"),"."))}f.isMDXComponent=!0}}]);