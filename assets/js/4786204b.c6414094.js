"use strict";(self.webpackChunklearn_cpp_and_dev_practices=self.webpackChunklearn_cpp_and_dev_practices||[]).push([[7808],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),i=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=i(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=i(t),d=a,f=m["".concat(u,".").concat(d)]||m[d]||p[d]||o;return t?r.createElement(f,c(c({ref:n},l),{},{components:t})):r.createElement(f,c({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var i=2;i<o;i++)c[i]=t[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5096:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return i},toc:function(){return l},default:function(){return m}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),c=["components"],s={title:"const",benefit:4,easiness:3,order:2,tags:["C++"]},u=void 0,i={unversionedId:"lessons/const",id:"lessons/const",isDocsHomePage:!1,title:"const",description:"Bonus trick",source:"@site/docs/lessons/const.md",sourceDirName:"lessons",slug:"/lessons/const",permalink:"/Learn--Cpp-And-Dev-Practices/docs/lessons/const",tags:[{label:"C++",permalink:"/Learn--Cpp-And-Dev-Practices/docs/tags/c"}],version:"current",frontMatter:{title:"const",benefit:4,easiness:3,order:2,tags:["C++"]},sidebar:"lessons",previous:{title:"CMake",permalink:"/Learn--Cpp-And-Dev-Practices/docs/lessons/cmake"},next:{title:"STL algorithms",permalink:"/Learn--Cpp-And-Dev-Practices/docs/lessons/stl-algorithms"}},l=[{value:"Bonus trick",id:"bonus-trick",children:[{value:"Bad :( (because <code>x</code> is not <code>const</code>)",id:"bad--because-x-is-not-const",children:[]},{value:"Good :)",id:"good-",children:[]}]}],p={toc:l};function m(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"bonus-trick"},"Bonus trick"),(0,o.kt)("p",null,"You can use lambdas for const variables that are complex to initialize."),(0,o.kt)("h3",{id:"bad--because-x-is-not-const"},"Bad :( (because ",(0,o.kt)("inlineCode",{parentName:"h3"},"x")," is not ",(0,o.kt)("inlineCode",{parentName:"h3"},"const"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum class MyEnum {\n    value0,\n    value1,\n    value2,\n};\n\nint do_something(MyEnum my_enum) {\n      int x;\n      switch(my_enum) {\n            case MyEnum::value0 :\n                  x = 17;\n                  break;\n            case MyEnum::value1 :\n                  x = 5;\n                  break;\n            case MyEnum::value2 :\n                  x = 30;\n                  break;\n            default:\n                  x = 0;\n                  break;\n      }\n      // use x\n      return x + 2;\n}\n\nint main() {\n    return do_something(MyEnum::value1);\n}\n")),(0,o.kt)("h3",{id:"good-"},"Good :)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum class MyEnum {\n    value0,\n    value1,\n    value2,\n};\n\nint do_something(MyEnum my_enum) {\n      const int x = [my_enum]() {\n            switch(my_enum) {\n                  case MyEnum::value0 :\n                        return 17;\n                  case MyEnum::value1 :\n                        return 5;\n                  case MyEnum::value2 :\n                        return 30;\n                  default:\n                        return 0;\n            }\n      }(); // parenthesis to call the lambda function that was just declared\n      // use x\n      return x + 2;\n}\n\nint main() {\n    return do_something(MyEnum::value1);\n}\n")))}m.isMDXComponent=!0}}]);