"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[4769],{4137:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(r),f=o,h=u["".concat(s,".").concat(f)]||u[f]||m[f]||i;return r?n.createElement(h,a(a({ref:t},l),{},{components:r})):n.createElement(h,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7717:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var n=r(7462),o=r(3366),i=(r(7294),r(4137)),a=["components"],p={title:"Polymorphism",benefit:3,easiness:2,order:3,tags:["Clean Code"]},s=void 0,c={unversionedId:"lessons/polymorphism",id:"lessons/polymorphism",title:"Polymorphism",description:"Static Polymorphism",source:"@site/../../content/lessons/polymorphism.md",sourceDirName:"lessons",slug:"/lessons/polymorphism",permalink:"/Learn--Cpp-And-Dev-Practices/lessons/polymorphism",tags:[{label:"Clean Code",permalink:"/Learn--Cpp-And-Dev-Practices/tags/clean-code"}],version:"current",frontMatter:{title:"Polymorphism",benefit:3,easiness:2,order:3,tags:["Clean Code"]},sidebar:"lessons",previous:{title:"Cache and Branches",permalink:"/Learn--Cpp-And-Dev-Practices/lessons/performance-cache-and-branches"},next:{title:"Trailing return type",permalink:"/Learn--Cpp-And-Dev-Practices/lessons/trailing-return-type"}},l=[{value:"Static Polymorphism",id:"static-polymorphism",children:[],level:2},{value:"Dynamic Polymorphism",id:"dynamic-polymorphism",children:[],level:2},{value:"To Go Further",id:"to-go-further",children:[],level:2}],m={toc:l};function u(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"static-polymorphism"},"Static Polymorphism"),(0,i.kt)("p",null,"Function overloading and templates."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.fluentcpp.com/2017/04/28/extract-interface-cpp/"},"https://www.fluentcpp.com/2017/04/28/extract-interface-cpp/")),(0,i.kt)("h2",{id:"dynamic-polymorphism"},"Dynamic Polymorphism"),(0,i.kt)("p",null,"Base class ",(0,i.kt)("em",{parentName:"p"},"vs")," ",(0,i.kt)("inlineCode",{parentName:"p"},"std::variant"),". When people say why OOP is so great, the biggest (hidden) argument is most often that ",(0,i.kt)("strong",{parentName:"p"},"polymorphism")," is great. But beware the confusion ! OOP is not the only way of achieving polymorphism ; generic programming with ",(0,i.kt)("inlineCode",{parentName:"p"},"std::variant")," is an option too."),(0,i.kt)("h2",{id:"to-go-further"},"To Go Further"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=fwXaRH5ffJM"},"Check this out")," (Comparison of different approaches to achieve polymorphism)"))}u.isMDXComponent=!0}}]);