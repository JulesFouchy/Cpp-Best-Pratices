"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[2318],{706:function(e){e.exports=JSON.parse('{"name":"C++","permalink":"/Learn--Clean-Code-With-Cpp/tags/c","docs":[{"id":"lessons/if-defined","title":"#if defined()","description":"#if defined(SOMETHING) offers more flexibility than #ifdef SOMETHING.","permalink":"/Learn--Clean-Code-With-Cpp/lessons/if-defined"},{"id":"lessons/random","title":"<random>","description":"Stephan T. Lavavej, rand() Considered Harmful (30min)","permalink":"/Learn--Clean-Code-With-Cpp/lessons/random"},{"id":"lessons/auto","title":"auto","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/auto"},{"id":"lessons/avoid-nested-namespaces","title":"Avoid nested namespaces","description":"https://youtu.be/xu7q8dGvuwk?t=1198","permalink":"/Learn--Clean-Code-With-Cpp/lessons/avoid-nested-namespaces"},{"id":"lessons/cpp-casts","title":"C++ casts","description":"5 min","permalink":"/Learn--Clean-Code-With-Cpp/lessons/cpp-casts"},{"id":"lessons/cmake","title":"CMake","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/cmake"},{"id":"lessons/const","title":"const","description":"Bonus trick","permalink":"/Learn--Clean-Code-With-Cpp/lessons/const"},{"id":"lessons/deleted-functions","title":"Deleted functions","description":"You can delete functions to prevent them from beeing used. This is mostly used to prevent a type from being copied ; for example std::sharedptr.","permalink":"/Learn--Clean-Code-With-Cpp/lessons/deleted-functions"},{"id":"lessons/designated_initializers","title":"Designated Initializers","description":"","permalink":"/Learn--Clean-Code-With-Cpp/lessons/designated_initializers"},{"id":"lessons/friend","title":"friend","description":"There are *very few* good reasons to use `friend`.","permalink":"/Learn--Clean-Code-With-Cpp/lessons/friend"},{"id":"lessons/install-a-compiler","title":"Install a compiler","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/install-a-compiler"},{"id":"lessons/lambda","title":"Lambda functions","description":"","permalink":"/Learn--Clean-Code-With-Cpp/lessons/lambda"},{"id":"lessons/move-semantics","title":"Move semantics","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/move-semantics"},{"id":"lessons/pointers-vs-references","title":"Pointers vs References","description":"Pointers can be null","permalink":"/Learn--Clean-Code-With-Cpp/lessons/pointers-vs-references"},{"id":"lessons/precompiled-header","title":"Precompiled Header","description":"https://youtu.be/eSI4wctZUto","permalink":"/Learn--Clean-Code-With-Cpp/lessons/precompiled-header"},{"id":"lessons/range-based-for-loop","title":"Range-based for loop","description":"It helps you express your intent more clearly. If you want to go over each element once (which the case of most for loops) you can write :","permalink":"/Learn--Clean-Code-With-Cpp/lessons/range-based-for-loop"},{"id":"lessons/smart-pointers","title":"Smart Pointers","description":"No naked new : this doesn\'t mean no dynamic allocations, it just means they should always be done through a smart pointer or a container.","permalink":"/Learn--Clean-Code-With-Cpp/lessons/smart-pointers"},{"id":"lessons/std-function","title":"std::function","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/std-function"},{"id":"lessons/optional","title":"std::optional","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/optional"},{"id":"lessons/string-and-string-view","title":"std::string and std::string_view","description":"","permalink":"/Learn--Clean-Code-With-Cpp/lessons/string-and-string-view"},{"id":"lessons/variant","title":"std::variant","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/variant"},{"id":"lessons/vector","title":"std::vector","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/vector"},{"id":"lessons/stl-algorithms","title":"STL algorithms","description":"Here are some of the most important ones:","permalink":"/Learn--Clean-Code-With-Cpp/lessons/stl-algorithms"},{"id":"lessons/rule-of-5","title":"The Rule of 5","description":"Brief","permalink":"/Learn--Clean-Code-With-Cpp/lessons/rule-of-5"},{"id":"lessons/trailing-return-type","title":"Trailing return type","description":"","permalink":"/Learn--Clean-Code-With-Cpp/lessons/trailing-return-type"}],"allTagsPath":"/Learn--Clean-Code-With-Cpp/tags"}')}}]);