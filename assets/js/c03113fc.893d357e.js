"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[7292],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,_=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return n?i.createElement(_,o(o({ref:t},c),{},{components:n})):i.createElement(_,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3198:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var i=n(7462),r=n(3366),a=(n(7294),n(4137)),o=["components"],s={title:"Write small functions",benefit:5,easiness:3,level:2,bias:2,tags:["Clean Code"]},l=void 0,u={unversionedId:"lessons/write-small-functions",id:"lessons/write-small-functions",title:"Write small functions",description:"Brief",source:"@site/../../content/lessons/write-small-functions.md",sourceDirName:"lessons",slug:"/lessons/write-small-functions",permalink:"/Learn--Clean-Code-With-Cpp/lessons/write-small-functions",tags:[{label:"Clean Code",permalink:"/Learn--Clean-Code-With-Cpp/tags/clean-code"}],version:"current",frontMatter:{title:"Write small functions",benefit:5,easiness:3,level:2,bias:2,tags:["Clean Code"]},sidebar:"lessons",previous:{title:"When to use structs",permalink:"/Learn--Clean-Code-With-Cpp/lessons/when-to-use-structs"},next:{title:"Make it work, then make it good",permalink:"/Learn--Clean-Code-With-Cpp/lessons/make-it-work-then-make-it-good"}},c=[{value:"Brief",id:"brief",children:[],level:2},{value:"Details",id:"details",children:[],level:2}],p={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"brief"},"Brief"),(0,a.kt)("p",null,"Small functions are way easier to read and reason about."),(0,a.kt)("p",null,"Here is what the Core Guidelines have to say about it : ",(0,a.kt)("a",{parentName:"p",href:"https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-single"},"https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-single")),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("p",null,"I used to write long functions like this, using comments to indicate the different parts of the function, because it felt silly to me to create a function that I would only use in one place."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void View::imgui_window(ImTextureID image_texture_id, ImageSize image_size, bool need_to_fit) \n{ \n    if (_is_open) { \n        ImGui::Begin(_name.c_str(), &_is_open, ImGuiWindowFlags_NoScrollbar); \n        // Update _size \n        auto size = ImGui::GetContentRegionAvail(); \n        if (size.x >= 1.f && size.y >= 1.f) { \n            _size.emplace( \n                static_cast<ImageSize::DataType>(size.x), \n                static_cast<ImageSize::DataType>(size.y)); \n        } \n        else { \n            _size.reset(); \n        } \n        // Update _position \n        _position = ImGui::GetCursorScreenPos(); \n \n        if (_size.has_value()) { \n            // Display the image \n            const auto fitted_image_size = need_to_fit \n                                               ? ImageSizeU::fit_into(*_size, image_size) \n                                               : static_cast<ImageSizeT<float>>(*_size); \n            ImGuiExtras::image_centered(image_texture_id, {fitted_image_size.width(), fitted_image_size.height()}); \n            _is_hovered = ImGui::IsItemHovered(); \n        } \n        else { \n            _is_hovered = false; \n        } \n        ImGui::End(); \n    } \n    else { \n        _size.reset(); \n        _is_hovered = false; \n    } \n} \n")),(0,a.kt)("p",null,"But I had to admit that I was having trouble reading those long functions, and that maybe everyone else was right.\nThe same code as above would look like this once split into more atomic parts :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void View::imgui_window(ImTextureID image_texture_id, ImageSize image_size, bool need_to_fit)\n{\n    if (_is_open) {\n        ImGui::Begin(_name.c_str(), &_is_open, ImGuiWindowFlags_NoScrollbar);\n        grab_window_size();\n        grab_window_position();\n        display_image(image_texture_id, image_size, need_to_fit);\n        ImGui::End();\n    }\n    else {\n        _size.reset();\n        _is_hovered = false;\n    }\n}\n\nvoid View::grab_window_size()\n{\n    auto size = ImGui::GetContentRegionAvail();\n    if (size.x >= 1.f && size.y >= 1.f) {\n        _size.emplace(\n            static_cast<ImageSize::DataType>(size.x),\n            static_cast<ImageSize::DataType>(size.y));\n    }\n    else {\n        _size.reset();\n    }\n}\n\nvoid View::grab_window_position()\n{\n    _position = ImGui::GetCursorScreenPos();\n}\n\nvoid View::display_image(ImTextureID image_texture_id, ImageSize image_size, bool need_to_fit)\n{\n    if (_size.has_value()) {\n        const auto fitted_image_size = need_to_fit\n                                           ? ImageSizeU::fit_into(*_size, image_size)\n                                           : static_cast<ImageSizeT<float>>(*_size);\n        ImGuiExtras::image_centered(image_texture_id, {fitted_image_size.width(), fitted_image_size.height()});\n        _is_hovered = ImGui::IsItemHovered();\n    }\n    else {\n        _is_hovered = false;\n    }\n}\n")))}m.isMDXComponent=!0}}]);