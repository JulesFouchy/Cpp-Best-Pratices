"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[2891],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1184:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(4137)),i=["components"],s={title:"Space out your code",benefit:2,easiness:5,level:"practices-and-patterns",tags:["Beautiful Code"]},l=void 0,c={unversionedId:"lessons/space-out-your-code",id:"lessons/space-out-your-code",title:"Space out your code",description:"Brief",source:"@site/../../content/lessons/space-out-your-code.md",sourceDirName:"lessons",slug:"/lessons/space-out-your-code",permalink:"/Learn--Clean-Code-With-Cpp/lessons/space-out-your-code",tags:[{label:"Beautiful Code",permalink:"/Learn--Clean-Code-With-Cpp/tags/beautiful-code"}],version:"current",frontMatter:{title:"Space out your code",benefit:2,easiness:5,level:"practices-and-patterns",tags:["Beautiful Code"]},sidebar:"lessons",previous:{title:"Single Source of Truth",permalink:"/Learn--Clean-Code-With-Cpp/lessons/single-source-of-truth"},next:{title:"Split problems in small pieces",permalink:"/Learn--Clean-Code-With-Cpp/lessons/split-problems-in-small-pieces"}},p=[{value:"Brief",id:"brief",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"brief"},"Brief"),(0,o.kt)("p",null,"One single statement doesn't have to be confined to a single line of code.",(0,o.kt)("br",null),"\nIf the line is getting long, you can always add a line break!"),(0,o.kt)("p",null,"I really like to add line breaks between each arguments of a function call, especially if they are important and I want to make them very easy to read:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Ex 1")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Good, you can quickly see each parameter and its value"',title:'"Good,',you:!0,can:!0,quickly:!0,see:!0,each:!0,parameter:!0,and:!0,its:!0,'value"':!0},"ctx.square(p6::Center{ctx.mouse()},\n           p6::Radius{0.3f},\n           p6::Rotation{0.011_turn});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Not great, the last parameters are harder to read"',title:'"Not',"great,":!0,the:!0,last:!0,parameters:!0,are:!0,harder:!0,to:!0,'read"':!0},"ctx.square(p6::Center{ctx.mouse()}, p6::Radius{0.3f}, p6::Rotation{0.011_turn});\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Ex 2")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Good, this is readable"',title:'"Good,',this:!0,is:!0,'readable"':!0},"_default_canvas.render_target().blit_to(glpp::RenderTarget::screen_framebuffer_id(),\n                                        framebuffer_size(),\n                                        glpp::Interpolation::NearestNeighbour);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Bad, the line is very long"',title:'"Bad,',the:!0,line:!0,is:!0,very:!0,'long"':!0},"_default_canvas.render_target().blit_to(glpp::RenderTarget::screen_framebuffer_id(), framebuffer_size(), glpp::Interpolation::NearestNeighbour);\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Ex 3")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Good, ternary expressions don\'t have to be written in one single line"',title:'"Good,',ternary:!0,expressions:!0,"don't":!0,have:!0,to:!0,be:!0,written:!0,in:!0,one:!0,single:!0,'line"':!0},"const float aspect_ratio = _is_controlling_aspect_ratio\n                              ? _aspect_ratio.as_float()\n                              : img::SizeU::aspect_ratio(frame_size);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Bad, it is harder to see the two alternatives"',title:'"Bad,',it:!0,is:!0,harder:!0,to:!0,see:!0,the:!0,two:!0,'alternatives"':!0},"const float aspect_ratio = _is_controlling_aspect_ratio ? _aspect_ratio.as_float() : img::SizeU::aspect_ratio(frame_size);\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Ex 4")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Good, line breaks and alignment make the structure of the code very clear"',title:'"Good,',line:!0,breaks:!0,and:!0,alignment:!0,make:!0,the:!0,structure:!0,of:!0,code:!0,very:!0,'clear"':!0},"constexpr Color color_from_hexadecimal_code(unsigned int hex_code) {\n    return Color(static_cast<float>((hex_code & 0xFF0000u) >> 16) / 255.f,\n                 static_cast<float>((hex_code & 0x00FF00u) >>  8) / 255.f,\n                 static_cast<float>((hex_code & 0x0000FFu) >>  0) / 255.f);\n}\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Ex 5")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Great, for a constructor\'s initializer list line breaks are essential"',title:'"Great,',for:!0,a:!0,"constructor's":!0,initializer:!0,list:!0,line:!0,breaks:!0,are:!0,'essential"':!0},"VideoExportProcess::VideoExportProcess(const VideoExportParams& params, std::string_view folder_path, img::Size size)\n    : _total_nb_of_frames_in_sequence{static_cast<int>(std::ceil((params.end - params.beginning) * params.fps))}\n    , _max_nb_digits_of_frame_count{static_cast<int>(std::ceil(std::log10(_total_nb_of_frames_in_sequence)))}\n    , _folder_path{folder_path}\n    , _size{size}\n    , _clock{params.fps, params.beginning}\n{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Bad, I hate it so much"',title:'"Bad,',I:!0,hate:!0,it:!0,so:!0,'much"':!0},"VideoExportProcess::VideoExportProcess(const VideoExportParams& params, std::string_view folder_path, img::Size size)\n    : _total_nb_of_frames_in_sequence{static_cast<int>(std::ceil((params.end - params.beginning) * params.fps))}, _max_nb_digits_of_frame_count{static_cast<int>(std::ceil(std::log10(_total_nb_of_frames_in_sequence)))}, _folder_path{folder_path}, _size{size}, _clock{params.fps, params.beginning}\n{}\n")))}d.isMDXComponent=!0}}]);