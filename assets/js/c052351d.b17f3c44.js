"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[3671],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7352:function(e,t,n){n.d(t,{Z:function(){return a}});var r=n(7294),o="video_E3b0";function a(e){var t=e.id;return r.createElement("div",{className:o},r.createElement("iframe",{src:"https://www.youtube.com/embed/"+t,title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}))}},1432:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(4137)),s=n(7352),i=["components"],l={title:"Smart Pointers",benefit:3,easiness:5,level:"basic-cpp",tags:["Clean Code","C++"]},c=void 0,p={unversionedId:"lessons/smart-pointers",id:"lessons/smart-pointers",title:"Smart Pointers",description:"No naked new : this doesn't mean no dynamic allocations, it just means they should always be done through a smart pointer or a container.",source:"@site/../../content/lessons/smart-pointers.md",sourceDirName:"lessons",slug:"/lessons/smart-pointers",permalink:"/Learn--Clean-Code-With-Cpp/lessons/smart-pointers",tags:[{label:"Clean Code",permalink:"/Learn--Clean-Code-With-Cpp/tags/clean-code"},{label:"C++",permalink:"/Learn--Clean-Code-With-Cpp/tags/c"}],version:"current",frontMatter:{title:"Smart Pointers",benefit:3,easiness:5,level:"basic-cpp",tags:["Clean Code","C++"]},sidebar:"lessons",previous:{title:"namespace",permalink:"/Learn--Clean-Code-With-Cpp/lessons/namespace"},next:{title:"std::function",permalink:"/Learn--Clean-Code-With-Cpp/lessons/std-function"}},u=[],m={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(s.Z,{id:"UOB7-B2MfwA?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb",mdxType:"YoutubeVideo"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"No naked new")," : this doesn't mean ",(0,a.kt)("em",{parentName:"p"},"no dynamic allocations"),", it just means they should always be done through a smart pointer or a container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <memory>\n\nMyClass* x = new MyClass(); // BAD\nstd::unique_ptr<MyClass> x = std::make_unique<MyClass>(); // GOOD\nstd::shared_ptr<MyClass> x = std::make_shared<MyClass>(); // GOOD too, but less often what you need\n")))}d.isMDXComponent=!0}}]);