"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[3936],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=i,f=u["".concat(l,".").concat(g)]||u[g]||d[g]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4685:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=n(7462),i=n(3366),a=(n(7294),n(4137)),o=["components"],s={title:"std::string and std::string_view",benefit:4,easiness:4,level:4,tags:["C++"]},l=void 0,c={unversionedId:"lessons/string-and-string-view",id:"lessons/string-and-string-view",title:"std::string and std::string_view",description:"",source:"@site/../../content/lessons/string-and-string-view.md",sourceDirName:"lessons",slug:"/lessons/string-and-string-view",permalink:"/Learn--Clean-Code-With-Cpp/lessons/string-and-string-view",tags:[{label:"C++",permalink:"/Learn--Clean-Code-With-Cpp/tags/c"}],version:"current",frontMatter:{title:"std::string and std::string_view",benefit:4,easiness:4,level:4,tags:["C++"]},sidebar:"lessons",previous:{title:"Designated Initializers",permalink:"/Learn--Clean-Code-With-Cpp/lessons/designated_initializers"},next:{title:"Static site generators",permalink:"/Learn--Clean-Code-With-Cpp/lessons/static-site-generators"}},p=[{value:"<code>string</code>",id:"string",children:[],level:2},{value:"<code>string_view</code>",id:"string_view",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"string_view")," is compatible with both ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"const char*"),". You don't need to do conversions or call .c_str()."),(0,a.kt)("h2",{id:"string"},(0,a.kt)("inlineCode",{parentName:"h2"},"string")),(0,a.kt)("h2",{id:"string_view"},(0,a.kt)("inlineCode",{parentName:"h2"},"string_view")),(0,a.kt)("p",null,"It is ",(0,a.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/string/basic_string_view"},"a new type from C++17"),". It is a non-owning reference to either a ",(0,a.kt)("inlineCode",{parentName:"p"},"const char*")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string"),"."),(0,a.kt)("p",null,"It has many advantages: providing the same API as ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"const char*")," without having to pay the cost of constructing a ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string"),", working with ",(0,a.kt)("inlineCode",{parentName:"p"},"const char*")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string")," as if they were the same type, ",(0,a.kt)("em",{parentName:"p"},"etc.")),(0,a.kt)("p",null,"Just remember that it is non-owning, like a reference: it is great for passing parameters around, but if you need to store it as a long-lasting variable you probably still need to use a ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string"),"."))}u.isMDXComponent=!0}}]);