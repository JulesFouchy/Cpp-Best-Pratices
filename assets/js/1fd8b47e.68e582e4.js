"use strict";(self.webpackChunklearn_cpp_and_dev_practices=self.webpackChunklearn_cpp_and_dev_practices||[]).push([[2505],{6319:function(e){e.exports=JSON.parse('{"name":"Architecture","permalink":"/Learn--Cpp-And-Dev-Practices/docs/tags/architecture","docs":[{"id":"lessons/composition-over-inheritance","title":"Composition over Inheritance","description":"","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/composition-over-inheritance"},{"id":"lessons/dependencies","title":"Dependencies","description":"Managing dependencies between the different parts of your application is probably the most difficult challenge as your codebase grows.","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/dependencies"},{"id":"lessons/dont-repeat-yourself","title":"DRY : Don\'t repeat yourself","description":"","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/dont-repeat-yourself"},{"id":"lessons/functional-programming","title":"Functional programming","description":"Functional programming is an important paradigm that has gotten a lot of attention recently (it took of long after Object Oriented programming). A lot of very good techniques have emerged from this field and have been incorporated in many languages, including C++. std::transform and many others are inherited from Functional Programming.","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/functional-programming"},{"id":"lessons/naming","title":"Naming","description":"Finding the right name sometimes gives you ideas of how to improve your design. For example I wanted a struct to hold a width and a height to represent the size of some images. I started calling it RectangleSize to be more generic, but when I realized it was more of an ImageSize, it helped me a lot ! Because then I added an invariant to that struct:optional instead, but then we will always have to check to see if it is nullopt.","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/naming"},{"id":"lessons/orthogonality","title":"Orthogonality","description":"","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/orthogonality"},{"id":"lessons/polymorphism","title":"Polymorphism","description":"Static Polymorphism","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/polymorphism"},{"id":"lessons/free-functions","title":"Prefer free functions","description":"Free functions help a lot with decoupling, code reuse, testing, etc.","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/free-functions"},{"id":"lessons/single-source-of-truth","title":"Single Source of Truth","description":"The Single Source of Truth principle is very simple : only store an information once !","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/single-source-of-truth"},{"id":"lessons/split-problems-in-small-pieces","title":"Split problems in small pieces","description":"","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/split-problems-in-small-pieces"},{"id":"lessons/type-design","title":"Type design","description":"About types to model a concept","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/type-design"},{"id":"lessons/use-libraries","title":"Use libraries","description":"Build from source","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/use-libraries"},{"id":"lessons/write-libraries","title":"Write libraries","description":"Even if it\'s only for your personal use, it will help you a lot with code reuse across projects and also inside one project. And also it will force you to make your code a little more generic, which most of the time will improve it at the same time. Moreover, it will make sure that the code is decoupled from the rest of your application.","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/write-libraries"},{"id":"lessons/write-small-functions","title":"Write small functions","description":"Brief","permalink":"/Learn--Cpp-And-Dev-Practices/docs/lessons/write-small-functions"}],"allTagsPath":"/Learn--Cpp-And-Dev-Practices/docs/tags"}')}}]);