"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[8469],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4773:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(4137)),i=["components"],s={title:"Naming",benefit:5,easiness:1,order:1,tags:["Clean Code"]},l=void 0,p={unversionedId:"lessons/naming",id:"lessons/naming",title:"Naming",description:"Finding the right name sometimes gives you ideas of how to improve your design. For example I wanted a struct to hold a width and a height to represent the size of some images. I started calling it RectangleSize to be more generic, but when I realized it was more of an ImageSize, it helped me a lot ! Because then I added an invariant to that struct:optional instead, but then we will always have to check to see if it is nullopt.",source:"@site/../../content/lessons/naming.md",sourceDirName:"lessons",slug:"/lessons/naming",permalink:"/Learn--Clean-Code-With-Cpp/lessons/naming",tags:[{label:"Clean Code",permalink:"/Learn--Clean-Code-With-Cpp/tags/clean-code"}],version:"current",frontMatter:{title:"Naming",benefit:5,easiness:1,order:1,tags:["Clean Code"]},sidebar:"lessons",previous:{title:"Use a formatting tool",permalink:"/Learn--Clean-Code-With-Cpp/lessons/formatting-tool"},next:{title:"Split problems in small pieces",permalink:"/Learn--Clean-Code-With-Cpp/lessons/split-problems-in-small-pieces"}},c=[],m={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Finding the right name sometimes gives you ideas of how to improve your design. For example I wanted a struct to hold a width and a height to represent the size of some images. I started calling it ",(0,o.kt)("inlineCode",{parentName:"p"},"RectangleSize")," to be more generic, but when I realized it was more of an ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageSize"),", it helped me a lot ! Because then I added an invariant to that struct : width >= 1 and height >= 1. This is very usefull because most graphics API won't accept an empty image anyways and I was doing tests all over the place to make sure width >= 1 and height >= 1. But now that I have this invariant for ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageSize")," I can use it safely without checks, since they already took place in the constructor of ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageSize"),". If we want to allow for an empty image size, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"std::optional<ImageSize>")," instead, but then we will always have to check to see if it is ",(0,o.kt)("inlineCode",{parentName:"p"},"nullopt"),"."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Going further")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/FyCYva9DhsI?t=2490"},(0,o.kt)("em",{parentName:"a"},"Kevlin Henney on naming"))," (10min)"),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/MBRoCdtZOYg"},(0,o.kt)("em",{parentName:"a"},"Kate Gregory on naming"))," (1h)"))))}u.isMDXComponent=!0}}]);