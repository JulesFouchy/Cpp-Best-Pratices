"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[3794],{4137:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2657:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(4137)),i=["components"],c={title:"const",benefit:4,easiness:3,level:3,tags:["Clean Code","C++"]},l=void 0,s={unversionedId:"lessons/const",id:"lessons/const",title:"const",description:"Bonus trick",source:"@site/../../content/lessons/const.md",sourceDirName:"lessons",slug:"/lessons/const",permalink:"/Learn--Clean-Code-With-Cpp/lessons/const",tags:[{label:"Clean Code",permalink:"/Learn--Clean-Code-With-Cpp/tags/clean-code"},{label:"C++",permalink:"/Learn--Clean-Code-With-Cpp/tags/c"}],version:"current",frontMatter:{title:"const",benefit:4,easiness:3,level:3,tags:["Clean Code","C++"]},sidebar:"lessons",previous:{title:"Code reviews",permalink:"/Learn--Clean-Code-With-Cpp/lessons/code-reviews"},next:{title:"Documentation",permalink:"/Learn--Clean-Code-With-Cpp/lessons/documentation"}},u=[{value:"Bonus trick",id:"bonus-trick",children:[{value:"Bad :( (because <code>x</code> is not <code>const</code>)",id:"bad--because-x-is-not-const",children:[],level:3},{value:"Good :)",id:"good-",children:[],level:3}],level:2}],p={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"bonus-trick"},"Bonus trick"),(0,a.kt)("p",null,"You can use lambdas for const variables that are complex to initialize."),(0,a.kt)("h3",{id:"bad--because-x-is-not-const"},"Bad :( (because ",(0,a.kt)("inlineCode",{parentName:"h3"},"x")," is not ",(0,a.kt)("inlineCode",{parentName:"h3"},"const"),")"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum class MyEnum {\n    value0,\n    value1,\n    value2,\n};\n\nint do_something(MyEnum my_enum) {\n      int x;\n      switch(my_enum) {\n            case MyEnum::value0 :\n                  x = 17;\n                  break;\n            case MyEnum::value1 :\n                  x = 5;\n                  break;\n            case MyEnum::value2 :\n                  x = 30;\n                  break;\n            default:\n                  x = 0;\n                  break;\n      }\n      // use x\n      return x + 2;\n}\n\nint main() {\n    return do_something(MyEnum::value1);\n}\n")),(0,a.kt)("h3",{id:"good-"},"Good :)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum class MyEnum {\n    value0,\n    value1,\n    value2,\n};\n\nint do_something(MyEnum my_enum) {\n      const int x = [my_enum]() {\n            switch(my_enum) {\n                  case MyEnum::value0 :\n                        return 17;\n                  case MyEnum::value1 :\n                        return 5;\n                  case MyEnum::value2 :\n                        return 30;\n                  default:\n                        return 0;\n            }\n      }(); // parenthesis to call the lambda function that was just declared\n      // use x\n      return x + 2;\n}\n\nint main() {\n    return do_something(MyEnum::value1);\n}\n")))}m.isMDXComponent=!0}}]);