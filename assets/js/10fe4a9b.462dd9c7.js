"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[9392],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),d=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return s.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},c=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=d(n),h=a,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||i;return n?s.createElement(m,o(o({ref:t},p),{},{components:n})):s.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var d=2;d<i;d++)o[d]=n[d];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8442:function(e,t,n){n.d(t,{Z:function(){return i}});var s=n(7294),a=n(4820);function i(e){var t=e.slug,n=e.text,i=e.anchor,o=a.find((function(e){return e.slug===t}));if(void 0===o)throw console.error('Broken link to inexistant lesson "'+t+'"'),"";return s.createElement("a",{href:o.link+(i||"")},n||o.title)}},1114:function(e,t,n){n.d(t,{Z:function(){return a}});var s=n(7294);function a(e){var t="https://github.com/JulesFouchy/Learn--Clean-Code-With-Cpp--Project/commit/"+e.hash;return s.createElement("a",{href:t,target:"_blank"},s.createElement("i",null,"Commit"))}},4722:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return h},default:function(){return g}});var s=n(7462),a=n(3366),i=(n(7294),n(4137)),o=n(6894),r=n(1114),l=n(8442),d=["components"],p={title:"Hangman"},u=void 0,c={unversionedId:"assignment/hangman",id:"assignment/hangman",title:"Hangman",description:"Our second game will be Hangman. The program picks a random word, and the player must find it. They enter letters ony by one",source:"@site/../../content/assignment/03-hangman.md",sourceDirName:"assignment",slug:"/assignment/hangman",permalink:"/Learn--Clean-Code-With-Cpp/assignment/hangman",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Hangman"},sidebar:"assignment",previous:{title:"Guess the number",permalink:"/Learn--Clean-Code-With-Cpp/assignment/guess-the-number"},next:{title:"Adding a menu",permalink:"/Learn--Clean-Code-With-Cpp/assignment/adding-a-menu"}},h=[{value:"The building blocks",id:"the-building-blocks",children:[],level:2},{value:"Picking a random word",id:"picking-a-random-word",children:[],level:2},{value:"Getting an input from the user",id:"getting-an-input-from-the-user",children:[],level:2},{value:"The state of the game",id:"the-state-of-the-game",children:[],level:2},{value:"show_number_of_lives()",id:"show_number_of_lives",children:[],level:2},{value:"player_is_alive()",id:"player_is_alive",children:[],level:2},{value:"player_has_won()",id:"player_has_won",children:[],level:2},{value:"show_word_to_guess_with_missing_letters()",id:"show_word_to_guess_with_missing_letters",children:[],level:2},{value:"word_contains()",id:"word_contains",children:[],level:2},{value:"mark_as_guessed()",id:"mark_as_guessed",children:[],level:2},{value:"remove_one_life()",id:"remove_one_life",children:[],level:2},{value:"show_congrats_message()",id:"show_congrats_message",children:[],level:2},{value:"show_defeat_message()",id:"show_defeat_message",children:[],level:2},{value:"Assembling it all",id:"assembling-it-all",children:[],level:2},{value:"Refactoring",id:"refactoring",children:[],level:2},{value:"Bonus",id:"bonus",children:[{value:"Enforcing invariants with a class",id:"enforcing-invariants-with-a-class",children:[],level:3}],level:2}],m={toc:h};function g(e){var t=e.components,n=(0,a.Z)(e,d);return(0,i.kt)("wrapper",(0,s.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Our second game will be ",(0,i.kt)("em",{parentName:"p"},"Hangman"),". The program picks a random word, and the player must find it. They enter letters ony by one: if they are in the word, then they are revealed, otherwise the player loses one life. They lose when they have no more lives, and they win if they find all letters of the word. Here is an example:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u2190 You have 8 lives",(0,i.kt)("br",null),"\n\u2190 ","_"," ","_"," ","_"," ","_",(0,i.kt)("br",null),"\n\u2192 e",(0,i.kt)("br",null),"\n\u2190 Correct!",(0,i.kt)("br",null),"\n\u2190 You have 8 lives",(0,i.kt)("br",null),"\n\u2190 ","_"," ","_"," ","_"," e",(0,i.kt)("br",null),"\n\u2192 m",(0,i.kt)("br",null),"\n\u2190 Nope!",(0,i.kt)("br",null),"\n\u2190 You have 7 lives",(0,i.kt)("br",null),"\n\u2190 ","_"," ","_"," ","_"," e",(0,i.kt)("br",null),"\n\u2192 c",(0,i.kt)("br",null),"\n\u2190 Correct!",(0,i.kt)("br",null),"\n\u2190 You have 7 lives",(0,i.kt)("br",null),"\n\u2190 c ","_"," ","_"," e",(0,i.kt)("br",null),"\n\u2192 o",(0,i.kt)("br",null),"\n\u2190 Correct!",(0,i.kt)("br",null),"\n\u2190 You have 7 lives",(0,i.kt)("br",null),"\n\u2190 c o ","_"," e",(0,i.kt)("br",null),"\n\u2192 d",(0,i.kt)("br",null),"\n\u2190 Congrats, you won!",(0,i.kt)("br",null),'\n\u2190 The word was "code"',(0,i.kt)("br",null))),(0,i.kt)(o.ZP,{mdxType:"TipTryNotToRead"}),(0,i.kt)("h2",{id:"the-building-blocks"},"The building blocks"),(0,i.kt)("p",null,"We will first write the global logic of our game, and will then implement each function one by one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"pick_a_word_to_guess();\nwhile (player_is_alive() && !player_has_won()) {\n    show_number_of_lives();\n    show_word_to_guess_with_missing_letters();\n    const auto guess = get_char_from_user();\n    if (word_to_guess_contains(guess)) {\n        mark_as_guessed(guess);\n    }\n    else {\n        remove_one_life();\n    }\n}\nif (player_has_won()) {\n    show_congrats_message();\n}\nelse {\n    show_defeat_message();\n}\n")),(0,i.kt)("p",null,"It should look like that in the end (even though we will probably have to modify it a bit as we write our code)"),(0,i.kt)("h2",{id:"picking-a-random-word"},"Picking a random word"),(0,i.kt)("p",null,"You might be able to reuse what we did for the last game where we needed a random int. If you do so, you will need to move the ",(0,i.kt)("inlineCode",{parentName:"p"},"rand()")," code to it's own file so that it can be included both in ",(0,i.kt)("em",{parentName:"p"},"Guess the Number")," and ",(0,i.kt)("em",{parentName:"p"},"Hangman"),"."),(0,i.kt)("p",null,"You can use a hardcoded list of words like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <array>\n\nconst char* pick_a_random_word() \n{\n    static constexpr std::array words = { \n        "code", \n        "crous", \n        "imac", \n        "opengl", \n    };\n \n    // TODO: return a random element from the array\n} \n')),(0,i.kt)(r.Z,{hash:"63ffa3454105ab89900143695485a768aaf30e55",mdxType:"CommitLink"}),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("p",null,"NB: you might also need to turn ",(0,i.kt)("inlineCode",{parentName:"p"},"rand()")," into a template in order to be able to use it with other types of integers like ",(0,i.kt)("inlineCode",{parentName:"p"},"size_t")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"uint32_t"),"."),(0,i.kt)(r.Z,{hash:"16a4076071420a2c6c9ed1188420d7364fb6c748",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"getting-an-input-from-the-user"},"Getting an input from the user"),(0,i.kt)("p",null,"The code is gonna be very similar to what we did in the last game, except that we want a ",(0,i.kt)("inlineCode",{parentName:"p"},"char")," instead of an ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),". It might be time to generalize that code with a ",(0,i.kt)("em",{parentName:"p"},"template"),"!"),(0,i.kt)("p",null,"First, let's move ",(0,i.kt)("inlineCode",{parentName:"p"},"get_int_from_user()")," into its own ",(0,i.kt)("em",{parentName:"p"},"get_input_from_user.h")," file."),(0,i.kt)(r.Z,{hash:"36046efb9e335e8eef972a0afc9b82a894a83e0d",mdxType:"CommitLink"}),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("p",null,"Then we can turn it into a template, and rename it because it is not tied to integers anymore:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"/// Blocks until the user inputs something of type T in the console\ntemplate<typename T>\nT get_input_from_user() {\n    // TODO: replace int with T\n}\n")),(0,i.kt)(r.Z,{hash:"aa392e00c74b209f68d24ff89a33532b9b4e2e95",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"the-state-of-the-game"},"The state of the game"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Now we will ask a difficult and fondamental question!")),(0,i.kt)("p",null,"Many functions we wrote in our pseudo-code need to have access to some state. For example ",(0,i.kt)("inlineCode",{parentName:"p"},"show_number_of_lives()")," needs to know the number of lives, ",(0,i.kt)("inlineCode",{parentName:"p"},"show_word_to_guess_with_holes()")," needs to know the word to guess and the letters that have already be found, and so on. So, how are we gonna give our functions access to this state?"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This is a complex question and there is no one true answer, so feel free to ponder and find your own \ud83e\udd70"))),(0,i.kt)("p",null,"One answer might be that we will make a class which will have all the state as member variables, and that our ",(0,i.kt)("inlineCode",{parentName:"p"},"show_number_of_lives()")," will be a member function. One problem with that approach is that now ",(0,i.kt)("inlineCode",{parentName:"p"},"show_number_of_lives()")," also has access to variables it doesn't need like the word to guess and the letters that have already be found. It is as if we wrote ",(0,i.kt)("inlineCode",{parentName:"p"},"show_number_of_lives(int number_of_lives, const std::string& word_to_guess, const std::vector<char>& letters_that_have_been_found)"),", giving three parameters to our function even though it only needs one."),(0,i.kt)("p",null,"The solution that I suggest is that we write all of them as free functions, taking only the parameters they need. We will then have our state in a struct and only pass the required parts of our state to the different functions. (See ",(0,i.kt)(l.Z,{slug:"free-functions",mdxType:"LessonLink"}),")"),(0,i.kt)("p",null,"So, what do we put in our state? Well, I guess we will see as we implement each function \ud83d\ude09"),(0,i.kt)("h2",{id:"show_number_of_lives"},"show_number_of_lives()"),(0,i.kt)("p",null,"This function only needs the number of lives, so its signature will be"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void show_number_of_lives(int number_of_lives) {\n    // TODO\n}\n")),(0,i.kt)(r.Z,{hash:"328230726b2a03f6a2d3697e315f1d60027e637f",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"player_is_alive"},"player_is_alive()"),(0,i.kt)("p",null,"The signature of this function will be"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"bool player_is_alive(int number_of_lives) {\n    // TODO\n}\n")),(0,i.kt)(r.Z,{hash:"39784edef20238fbd646058d9ca63fc1928314eb",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"player_has_won"},"player_has_won()"),(0,i.kt)("p",null,"This one is a bit tricky ; we need to decide how we are gonna store the letters that the user has guessed in order to know if has won. We have many choices of implementation. We can trade off simplicity of the code for performance if we want to. But since the words are always gonna be small (less than 1000 characters, obviously) performance should not be a concern and we are gonna aim for the simplest code possible. I thing of vector of bools will work great, indicating for each letter of the word if it has been found."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"bool player_has_won(const std::vector<bool>& letters_guessed) {\n    // TODO\n}\n")),(0,i.kt)("p",null,"We need to know if the vector contains at least one false. You might be tempted to use a loop, but you can also use an algorithm from the standard library and do this in one line! Go search on the Internet how you can do that \ud83d\ude09",(0,i.kt)("br",null),"\nNB: several algorithms can be used to achieve this result and it doesn't really matter which one you pick."),(0,i.kt)(r.Z,{hash:"1f853409ad2bd1f71d198f394f5a9d4da2616e67",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"show_word_to_guess_with_missing_letters"},"show_word_to_guess_with_missing_letters()"),(0,i.kt)("p",null,"We need to output something like ",(0,i.kt)("em",{parentName:"p"},"c ","_"," ","_"," e")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void show_word_to_guess_with_missing_letters(const std::string& word, const std::vector<bool>& letters_guessed) {\n    // TODO\n}\n")),(0,i.kt)(r.Z,{hash:"a7a27b74ad1af8fa89c5e1a67abe5178ca7af6ef",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"word_contains"},"word_contains()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"bool word_contains(char letter, std::string_view word) {\n    // TODO\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"What is string_view?")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"It is ",(0,i.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/string/basic_string_view"},"a new type from C++17"),". It is a non-owning reference to either a ",(0,i.kt)("inlineCode",{parentName:"p"},"const char*")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"std::string"),"."),(0,i.kt)("p",{parentName:"div"},"It has many advantages: providing the same API as ",(0,i.kt)("inlineCode",{parentName:"p"},"std::string")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"const char*")," without having to pay the cost of constructing a ",(0,i.kt)("inlineCode",{parentName:"p"},"std::string"),", working with ",(0,i.kt)("inlineCode",{parentName:"p"},"const char*")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"std::string")," as if they were the same type, ",(0,i.kt)("em",{parentName:"p"},"etc.")),(0,i.kt)("p",{parentName:"div"},"Just remember that it is non-owning, like a reference: it is great for passing parameters around, but if you need to store it as a long-lasting variable you probably still need to use a ",(0,i.kt)("inlineCode",{parentName:"p"},"std::string"),"."),(0,i.kt)("p",{parentName:"div"},"(Read ",(0,i.kt)(l.Z,{slug:"string-and-string-view",mdxType:"LessonLink"}),")"))),(0,i.kt)("p",null,"(",(0,i.kt)("strong",{parentName:"p"},"NB:")," there might be a one-liner solution available in the standard library! Go search for it \ud83d\ude09)"),(0,i.kt)(r.Z,{hash:"f4d32f3a93cfb3455cd977c41e99b7956b51cd08",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"mark_as_guessed"},"mark_as_guessed()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void mark_as_guessed(char guessed_letter, std::vector<bool>& letters_guessed, std::string_view word_to_guess) {\n    // TODO\n}\n")),(0,i.kt)("p",null,"Again, try to use an algorithm instead of a raw loop."),(0,i.kt)(r.Z,{hash:"bf39accdad3e94b34caf912a9a50993e61daae10",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"remove_one_life"},"remove_one_life()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void remove_one_life(int& lives_count) {\n    // TODO\n}\n")),(0,i.kt)(r.Z,{hash:"f2700eb415a3c19201dd5c6ba79553ca12d20a33",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"show_congrats_message"},"show_congrats_message()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void show_congrats_message(std::string_view word_to_guess) {\n    // TODO\n}\n")),(0,i.kt)(r.Z,{hash:"905a59b56114569a5c97736f25c5c29a2af29317",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"show_defeat_message"},"show_defeat_message()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void show_defeat_message(std::string_view word_to_guess) {\n    // TODO\n}\n")),(0,i.kt)(r.Z,{hash:"6b926baddbe8139f406bfc70f3d768e561434ce3",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"assembling-it-all"},"Assembling it all"),(0,i.kt)("p",null,"Now we can go back to our pseudo-code and implement it. The final code might be a bit different because we did not consider the parameters we had to pass to each function, but the structure of the code is still the same!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void play_hangman() {\n    // TODO: adapt the code below to make it work\n    pick_a_word_to_guess();\n    while (player_is_alive() && !player_has_won()) {\n        show_number_of_lives();\n        show_word_to_guess_with_missing_letters();\n        const auto guess = get_char_from_user();\n        if (word_to_guess_contains(guess)) {\n            mark_as_guessed(guess);\n        }\n        else {\n            remove_one_life();\n        }\n    }\n    if (player_has_won()) {\n        show_congrats_message();\n    }\n    else {\n        show_defeat_message();\n    }\n}\n")),(0,i.kt)(r.Z,{hash:"ab4f021e61f020e4be095532e1258e021cd493b6",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"refactoring"},"Refactoring"),(0,i.kt)("p",null,"Now, as we did for the previous game, we will move all this code into its file."),(0,i.kt)(r.Z,{hash:"1fedb688994be92d5e787f733e685611973c7256",mdxType:"CommitLink"}),(0,i.kt)("h2",{id:"bonus"},"Bonus"),(0,i.kt)("h3",{id:"enforcing-invariants-with-a-class"},"Enforcing invariants with a class"),(0,i.kt)("p",null,"You noticed that in several functions we had to ",(0,i.kt)("inlineCode",{parentName:"p"},"assert(word_to_guess.size() == letters_guessed.size())"),". This is because from the point of view of the function their is no guarantee that this invariant has been enforced. But because of that we end up checking the invariant many times, which is a waste of effort and requires more code (and code duplication!)."),(0,i.kt)("p",null,"So, how can we improve this situation? Well, classes are made exactly for that reason (and only that reason): ",(0,i.kt)("em",{parentName:"p"},"enforcing invariants"),"!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class WordWithMissingLetters {\npublic:\n    WordWithMissingLetters(std::string_view word)\n        : _word{word}\n        , _letters_revealed(word.size(), false) // The invariant is enforced by the constructor here, and no public function of this class allows users to break the invariant, so we can guarantee that it will be preserved!\n    {}\n\n    // TODO: implement the methods required by the outside world\n\nprivate:\n    std::string _word;\n    std::vector<bool> _letters_revealed;\n};\n")),(0,i.kt)("p",null,"Now think about which of the functions we wrote deserve (or need) to be members of this class? TIP: try to move as few functions as possible inside the class. Only those that need access to the private details of the class must (and should) be moved in the class. Because each member function has to make sure that the invariant is preserved, whereas free functions using this class can rely on the fact that the invariant is enforced by the class."),(0,i.kt)("p",null,"You will also probably need to add some getters."),(0,i.kt)(r.Z,{hash:"3972c14c04b0a88da9a08b7a27625cbe3127bc8b",mdxType:"CommitLink"}),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Designing a good class requires time and thinking, but it can simplify the rest of your code later down the road, and makes your code easier to reason about."),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Small")," classes that do their job well and enforce one or two invariants are all the rage!"),(0,i.kt)("br",null),"\n(Read ",(0,i.kt)(l.Z,{slug:"design-great-classes",mdxType:"LessonLink"}),")"))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Bonus")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Can you find a better name for this class? The current name is great because it is descriptive, but it is a bit long. Can you find a shorter name that is still as clear as the current one?"))))}g.isMDXComponent=!0},6894:function(e,t,n){n.d(t,{ZP:function(){return l}});var s=n(7462),a=n(3366),i=(n(7294),n(4137)),o=["components"],r={toc:[]};function l(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,s.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"I encourage you to first try to code without reading the guided steps that follow! Think of the different functions that you need to write, and try to implement them!",(0,i.kt)("br",null),"\nOnly when you are stuck are you allowed to keep reading \ud83d\ude09 And read only enough to get unstuck! Then try to keep coding by yourself \ud83d\ude01 (until you are stuck again)"))))}l.isMDXComponent=!0},4820:function(e){e.exports=JSON.parse('[{"title":"Use an IDE","benefit":5,"easiness":5,"order":1,"tags":["Tools"],"link":"/Learn--Clean-Code-With-Cpp/lessons/ide","slug":"ide","priority":1},{"title":"Use Git","benefit":5,"easiness":4,"order":1,"bias":1,"tags":["Tools","Git"],"link":"/Learn--Clean-Code-With-Cpp/lessons/git","slug":"git","priority":0.9875},{"title":"Use a debugger","benefit":5,"easiness":4,"order":1,"tags":["Tools"],"link":"/Learn--Clean-Code-With-Cpp/lessons/debugger","slug":"debugger","priority":0.9875},{"title":"Use a formatting tool","benefit":5,"easiness":4,"order":1,"tags":["Tools"],"link":"/Learn--Clean-Code-With-Cpp/lessons/formatting-tool","slug":"formatting-tool","priority":0.9875},{"title":"Static analysis and Sanitizers","benefit":5,"easiness":3,"order":1,"tags":["Tools"],"link":"/Learn--Clean-Code-With-Cpp/lessons/static-analysis-and-sanitizers","slug":"static-analysis-and-sanitizers","priority":0.975},{"title":"Naming","benefit":5,"easiness":1,"order":1,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/naming","slug":"naming","priority":0.95},{"title":"Consistency in style","benefit":2,"easiness":5,"order":1,"tags":["Beautiful Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/consistency-in-style","slug":"consistency-in-style","priority":0.8875000000000001},{"title":"Prefer free functions","benefit":5,"easiness":3,"order":2,"bias":5,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/free-functions","slug":"free-functions","priority":0.775},{"title":"Design Great Classes","benefit":5,"easiness":3,"order":2,"bias":4,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/design-great-classes","slug":"design-great-classes","priority":0.775},{"title":"When to use structs","benefit":5,"easiness":3,"order":2,"bias":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/when-to-use-structs","slug":"when-to-use-structs","priority":0.775},{"title":"Write small functions","benefit":5,"easiness":3,"order":2,"bias":2,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/write-small-functions","slug":"write-small-functions","priority":0.775},{"title":"Make it work, then make it good","benefit":5,"easiness":3,"order":2,"bias":1,"tags":["Workflow"],"link":"/Learn--Clean-Code-With-Cpp/lessons/make-it-work-then-make-it-good","slug":"make-it-work-then-make-it-good","priority":0.775},{"title":"DRY: Don\'t repeat yourself","benefit":5,"easiness":2,"order":2,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/dont-repeat-yourself","slug":"dont-repeat-yourself","priority":0.7625000000000001},{"title":"Enums","benefit":4,"easiness":5,"order":2,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/enums","slug":"enums","priority":0.7625000000000001},{"title":"Orthogonality","benefit":5,"easiness":2,"order":2,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/orthogonality","slug":"orthogonality","priority":0.7625000000000001},{"title":"Split problems in small pieces","benefit":5,"easiness":1,"order":2,"tags":["Workflow"],"link":"/Learn--Clean-Code-With-Cpp/lessons/split-problems-in-small-pieces","slug":"split-problems-in-small-pieces","priority":0.75},{"title":"std::vector","benefit":5,"easiness":5,"order":3,"tags":["Clean Code","Performant Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/vector","slug":"vector","priority":0.6},{"title":"Documentation","benefit":5,"easiness":3,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/documentation","slug":"documentation","priority":0.575},{"title":"Stack vs Heap","benefit":5,"easiness":3,"order":3,"tags":["Performant Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/stack-vs-heap","slug":"stack-vs-heap","priority":0.575},{"title":"Use libraries","benefit":5,"easiness":3,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/use-libraries","slug":"use-libraries","priority":0.575},{"title":"assert","benefit":4,"easiness":5,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/assert","slug":"assert","priority":0.5625},{"title":"auto","benefit":4,"easiness":5,"order":3,"tags":["Beautiful Code","Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/auto","slug":"auto","priority":0.5625},{"title":"Testing","benefit":5,"easiness":2,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/testing","slug":"testing","priority":0.5625},{"title":"Type design","benefit":5,"easiness":2,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/type-design","slug":"type-design","priority":0.5625},{"title":"Dependencies","benefit":5,"easiness":1,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/dependencies","slug":"dependencies","priority":0.55},{"title":"Lambda functions","benefit":4,"easiness":4,"order":3,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/lambda","slug":"lambda","priority":0.55},{"title":"Master your IDE","benefit":4,"easiness":4,"order":3,"tags":["Tools"],"link":"/Learn--Clean-Code-With-Cpp/lessons/master-your-ide","slug":"master-your-ide","priority":0.55},{"title":"std::optional","benefit":4,"easiness":4,"order":3,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/optional","slug":"optional","priority":0.55},{"title":"Single Source of Truth","benefit":4,"easiness":4,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/single-source-of-truth","slug":"single-source-of-truth","priority":0.55},{"title":"Strong Typing","benefit":4,"easiness":4,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/strong-typing","slug":"strong-typing","priority":0.55},{"title":"Code reviews","benefit":4,"easiness":3,"order":3,"tags":["Workflow"],"link":"/Learn--Clean-Code-With-Cpp/lessons/code-reviews","slug":"code-reviews","priority":0.5375},{"title":"const","benefit":4,"easiness":3,"order":3,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/const","slug":"const","priority":0.5375},{"title":"Don\'t overfocus on performance","benefit":4,"easiness":3,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/dont-overfocus-on-performance","slug":"dont-overfocus-on-performance","priority":0.5375},{"title":"Git submodules","benefit":4,"easiness":3,"order":3,"tags":["Tools","Git"],"link":"/Learn--Clean-Code-With-Cpp/lessons/git-submodules","slug":"git-submodules","priority":0.5375},{"title":"STL algorithms","benefit":4,"easiness":3,"order":3,"tags":["Clean Code","Performant Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/stl-algorithms","slug":"stl-algorithms","priority":0.5375},{"title":"Composition over Inheritance","benefit":4,"easiness":2,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/composition-over-inheritance","slug":"composition-over-inheritance","priority":0.525},{"title":"Debug vs Release","benefit":3,"easiness":5,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/debug-vs-release","slug":"debug-vs-release","priority":0.525},{"title":"Immediately Invoked Function","benefit":3,"easiness":5,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/immediately-invoked-function","slug":"immediately-invoked-function","priority":0.525},{"title":"Markdown","benefit":3,"easiness":5,"order":3,"tags":["Tools"],"link":"/Learn--Clean-Code-With-Cpp/lessons/markdown","slug":"markdown","priority":0.525},{"title":"Range-based for loop","benefit":3,"easiness":5,"order":3,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/range-based-for-loop","slug":"range-based-for-loop","priority":0.525},{"title":"Smart Pointers","benefit":3,"easiness":5,"order":3,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/smart-pointers","slug":"smart-pointers","priority":0.525},{"title":"Error Handling","benefit":3,"easiness":4,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/error-handling","slug":"error-handling","priority":0.5125},{"title":"Git Pull Requests","benefit":3,"easiness":4,"order":3,"tags":["Tools","Git"],"link":"/Learn--Clean-Code-With-Cpp/lessons/git-pull-request","slug":"git-pull-request","priority":0.5125},{"title":"Advanced Git features","benefit":3,"easiness":3,"order":3,"tags":["Tools","Git"],"link":"/Learn--Clean-Code-With-Cpp/lessons/advanced-git-features","slug":"advanced-git-features","priority":0.5},{"title":"CMake","benefit":3,"easiness":3,"order":3,"tags":["C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/cmake","slug":"cmake","priority":0.5},{"title":"Functional programming","benefit":3,"easiness":3,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/functional-programming","slug":"functional-programming","priority":0.5},{"title":"Move semantics","benefit":3,"easiness":3,"order":3,"tags":["Performant Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/move-semantics","slug":"move-semantics","priority":0.5},{"title":"The Rule of 5","benefit":3,"easiness":3,"order":3,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/rule-of-5","slug":"rule-of-5","priority":0.5},{"title":"State and Strategy","benefit":3,"easiness":3,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/state-and-strategy","slug":"state-and-strategy","priority":0.5},{"title":"std::variant","benefit":3,"easiness":3,"order":3,"tags":["Clean Code","Performant Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/variant","slug":"variant","priority":0.5},{"title":"Cache and Branches","benefit":3,"easiness":2,"order":3,"tags":["Performant Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/cache-and-branches","slug":"cache-and-branches","priority":0.4875},{"title":"Multithreading","benefit":3,"easiness":2,"order":3,"tags":["Performant Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/multithreading","slug":"multithreading","priority":0.4875},{"title":"Polymorphism","benefit":3,"easiness":2,"order":3,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/polymorphism","slug":"polymorphism","priority":0.4875},{"title":"Watch conferences","benefit":5,"easiness":3,"order":4,"tags":["Workflow"],"link":"/Learn--Clean-Code-With-Cpp/lessons/watch-conferences","slug":"watch-conferences","priority":0.375},{"title":"Write libraries","benefit":5,"easiness":3,"order":4,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/write-libraries","slug":"write-libraries","priority":0.375},{"title":"Dear ImGui","benefit":5,"easiness":2,"order":4,"tags":["Libraries & Frameworks"],"link":"/Learn--Clean-Code-With-Cpp/lessons/dear-imgui","slug":"dear-imgui","priority":0.36250000000000004},{"title":"Designated Initializers","benefit":4,"easiness":5,"order":4,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/designated_initializers","slug":"designated_initializers","priority":0.36250000000000004},{"title":"std::string and std::string_view","benefit":4,"easiness":4,"order":4,"tags":["C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/string-and-string-view","slug":"string-and-string-view","priority":0.35000000000000003},{"title":"Static site generators","benefit":4,"easiness":3,"order":4,"tags":["Tools"],"link":"/Learn--Clean-Code-With-Cpp/lessons/static-site-generators","slug":"static-site-generators","priority":0.3375},{"title":"Deleted functions","benefit":3,"easiness":5,"order":4,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/deleted-functions","slug":"deleted-functions","priority":0.325},{"title":"Type erasure","benefit":4,"easiness":2,"order":4,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/type-erasure","slug":"type-erasure","priority":0.325},{"title":"wasm and electron","benefit":4,"easiness":2,"order":4,"tags":["Libraries & Frameworks"],"link":"/Learn--Clean-Code-With-Cpp/lessons/wasm-and-electron","slug":"wasm-and-electron","priority":0.325},{"title":"Scope guard","benefit":3,"easiness":4,"order":4,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/scope-guard","slug":"scope-guard","priority":0.3125},{"title":"C++ casts","benefit":3,"easiness":3,"order":4,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/cpp-casts","slug":"cpp-casts","priority":0.30000000000000004},{"title":"Measuring performance","benefit":3,"easiness":3,"order":4,"tags":["Performant Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/measuring-performance","slug":"measuring-performance","priority":0.30000000000000004},{"title":"Precompiled Header","benefit":3,"easiness":3,"order":4,"tags":["C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/precompiled-header","slug":"precompiled-header","priority":0.30000000000000004},{"title":"<random>","benefit":3,"easiness":3,"order":4,"tags":["C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/random","slug":"random","priority":0.30000000000000004},{"title":"Linked lists","benefit":2,"easiness":5,"order":4,"tags":["Performant Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/linked-list","slug":"linked-list","priority":0.28750000000000003},{"title":"Avoid dead code","benefit":2,"easiness":3,"order":4,"tags":["Clean Code"],"link":"/Learn--Clean-Code-With-Cpp/lessons/avoid-dead-code","slug":"avoid-dead-code","priority":0.2625},{"title":"friend","benefit":1,"easiness":5,"order":4,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/friend","slug":"friend","priority":0.25},{"title":"Pointers vs References","benefit":2,"easiness":2,"order":4,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/pointers-vs-references","slug":"pointers-vs-references","priority":0.25},{"title":"Avoid nested namespaces","benefit":1,"easiness":5,"order":5,"tags":["Clean Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/avoid-nested-namespaces","slug":"avoid-nested-namespaces","priority":0.05},{"title":"#if defined()","benefit":1,"easiness":5,"order":5,"tags":["Beautiful Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/if-defined","slug":"if-defined","priority":0.05},{"title":"Trailing return type","benefit":1,"easiness":5,"order":5,"tags":["Beautiful Code","C++"],"link":"/Learn--Clean-Code-With-Cpp/lessons/trailing-return-type","slug":"trailing-return-type","priority":0.05}]')}}]);