"use strict";(self.webpackChunklearn_cpp_and_dev_practices=self.webpackChunklearn_cpp_and_dev_practices||[]).push([[6612],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=p(t),m=a,g=f["".concat(s,".").concat(m)]||f[m]||l[m]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7627:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return f}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],c={title:"An AI for Hangman"},s=void 0,p={unversionedId:"assignment/ai-for-hangman",id:"assignment/ai-for-hangman",isDocsHomePage:!1,title:"An AI for Hangman",description:"Now we want to write a program that plays Hangman by itself.",source:"@site/docs/assignment/08-ai-for-hangman.md",sourceDirName:"assignment",slug:"/assignment/ai-for-hangman",permalink:"/Learn--Cpp-And-Dev-Practices/docs/assignment/ai-for-hangman",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"An AI for Hangman"},sidebar:"assignment",previous:{title:"Adding tests",permalink:"/Learn--Cpp-And-Dev-Practices/docs/assignment/adding-tests"},next:{title:"Going further",permalink:"/Learn--Cpp-And-Dev-Practices/docs/assignment/going-further"}},u=[],l={toc:u};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Now we want to write a program that plays ",(0,o.kt)("em",{parentName:"p"},"Hangman")," by itself."),(0,o.kt)("p",null,"You will notice that at the moment our ",(0,o.kt)("inlineCode",{parentName:"p"},"play_hangman()")," function is very opaque and you cannot easily change the way the programm receives guesses from the user. This is a small design flaw that we will fix through ",(0,o.kt)("em",{parentName:"p"},"Dependency Injection")," (which is a fancy way of saying that we will add a parameter to our function):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void play_hangman(std::function<char()> get_next_guess) {\n    // TODO: replace get_input_from_user<char>() with get_next_guess()\n}\n")))}f.isMDXComponent=!0}}]);