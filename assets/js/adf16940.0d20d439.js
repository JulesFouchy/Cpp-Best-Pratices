"use strict";(self.webpackChunkteaching_toolbox_website_generator=self.webpackChunkteaching_toolbox_website_generator||[]).push([[3936],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=i,f=d["".concat(l,".").concat(g)]||d[g]||u[g]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4685:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(4137)),a=["components"],s={title:"std::string and std::string_view",benefit:4,easiness:4,level:"basic-cpp",tags:["C++"]},l=void 0,p={unversionedId:"lessons/string-and-string-view",id:"lessons/string-and-string-view",title:"std::string and std::string_view",description:"",source:"@site/../../content/lessons/string-and-string-view.md",sourceDirName:"lessons",slug:"/lessons/string-and-string-view",permalink:"/Learn--Clean-Code-With-Cpp/lessons/string-and-string-view",tags:[{label:"C++",permalink:"/Learn--Clean-Code-With-Cpp/tags/c"}],version:"current",frontMatter:{title:"std::string and std::string_view",benefit:4,easiness:4,level:"basic-cpp",tags:["C++"]},sidebar:"lessons",previous:{title:"std::optional",permalink:"/Learn--Clean-Code-With-Cpp/lessons/optional"},next:{title:"const",permalink:"/Learn--Clean-Code-With-Cpp/lessons/const"}},c=[{value:"<code>string</code>",id:"string",children:[],level:2},{value:"<code>string_view</code>",id:"string_view",children:[],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string_view")," is compatible with both ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"const char*"),". You don't need to do conversions or call .c_str()."),(0,o.kt)("h2",{id:"string"},(0,o.kt)("inlineCode",{parentName:"h2"},"string")),(0,o.kt)("h2",{id:"string_view"},(0,o.kt)("inlineCode",{parentName:"h2"},"string_view")),(0,o.kt)("p",null,"It is ",(0,o.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/string/basic_string_view"},"a new type from C++17"),". It is a non-owning reference to either a ",(0,o.kt)("inlineCode",{parentName:"p"},"const char*")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"std::string"),"."),(0,o.kt)("p",null,"It has many advantages: providing the same API as ",(0,o.kt)("inlineCode",{parentName:"p"},"std::string")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"const char*")," without having to pay the cost of constructing a ",(0,o.kt)("inlineCode",{parentName:"p"},"std::string"),", working with ",(0,o.kt)("inlineCode",{parentName:"p"},"const char*")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"std::string")," as if they were the same type, ",(0,o.kt)("em",{parentName:"p"},"etc.")),(0,o.kt)("p",null,"Just remember that it is non-owning, like a reference: it is great for passing parameters around, but if you need to store it as a long-lasting variable you probably still need to use a ",(0,o.kt)("inlineCode",{parentName:"p"},"std::string"),"."))}d.isMDXComponent=!0}}]);